(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{547:function(t,v,_){"use strict";_.r(v);var s=_(4),e=Object(s.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h3",{attrs:{id:"xss"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#xss"}},[t._v("#")]),t._v(" XSS")]),t._v(" "),_("p",[t._v("XSS，即Cross Site Script(跨站脚本攻击)。XSS攻击是指攻击者在网上注入恶意的客户端代码，通过恶意脚本对客户端网页进行篡改，从而在用户浏览网页时，对用户浏览器进行控制或获取用户隐私数据的一种攻击方式")]),t._v(" "),_("p",[t._v("攻击者对客户端网页注入的恶意脚本一般包括Javascript，有时也会包含HTML和Flash。有很多种方式进行XSS攻击，但它们的共同点为：将一些隐私数据像cookie、session发送给攻击者，将受害者重定向到一个由攻击者控制的网站，在受害者的机器上进行一些恶意操作")]),t._v(" "),_("p",[t._v("XSS攻击可以分为3类：反射型（非持久型）、存储型（持久型）、基于DOM")]),t._v(" "),_("ol",[_("li",[t._v("反射型")])]),t._v(" "),_("p",[t._v("发出请求时，XSS代码出现在url种，作为输入提交到服务器端，服务器端解析后响应，XSS代码随响应内容一起传回浏览器，最后浏览器解析执行XSS代码。这个过程像一次反射，所以叫反射型XSS")]),t._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[t._v("存储型")])]),t._v(" "),_("p",[t._v("存储型XSS和反射型的差别在于，提交的代码会存储在服务器端（数据库、内存、文件系统等），下次请求目标页面时不用再提交XSS代码")]),t._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[t._v("基于DOM")])]),t._v(" "),_("p",[t._v("基于DOM的XSS攻击是指通过恶意脚本修改页面的DOM结构，是存粹发生在客户端的攻击")]),t._v(" "),_("h4",{attrs:{id:"防范措施"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#防范措施"}},[t._v("#")]),t._v(" 防范措施")]),t._v(" "),_("ol",[_("li",[t._v("HttpOnly防止截取Cookie")])]),t._v(" "),_("p",[t._v("攻击者可以通过注入恶意脚本获取用户的Cookie信息。通常Cookie中都包含了用户的登录凭证信息，攻击者在获取到Cookie之后，则可以发起Cookie劫持攻击。所以，严格来说，HttpOnly并非阻止XSS攻击，而是能阻止XSS攻击后的Cookie劫持攻击")]),t._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[t._v("输入检查")])]),t._v(" "),_("p",[t._v("不要相信用户的任何输入。对用户的任何输入都要进行检查、过滤和转义")]),t._v(" "),_("p",[t._v("在XSS防御中，输入检查一般是检查用户的数据中是否包含"),_("code",[t._v("<")]),t._v("、"),_("code",[t._v(">")]),t._v("等特殊字符，如果存在，则对特殊字符进行过滤或编码，这种方式也称XSS Filter")]),t._v(" "),_("h3",{attrs:{id:"csrf"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#csrf"}},[t._v("#")]),t._v(" CSRF")]),t._v(" "),_("p",[t._v("CSRF，即 Cross Site Request Forgery （跨站请求伪造），是一种劫持受信任用户向服务器发送非预期请求的攻击方式")]),t._v(" "),_("p",[t._v("通常情况下，CSRF攻击是攻击者借助受害者的Cookie骗取服务器的信任，可以在受害者毫不知情的情况下以受害者名义伪造请求发送给受攻击的服务器，从而在未授权的情况下执行在权限保护下的操作")]),t._v(" "),_("img",{staticStyle:{height:"300px"},attrs:{src:t.$withBase("/CSRF.jpg"),alt:"CSRF原理"}}),t._v(" "),_("p",[t._v("从上图可以看出，要完成一次CSRF攻击，受害者必须满足两个必要的条件：")]),t._v(" "),_("ol",[_("li",[t._v("登录受信任的网站A，并在本地生成Cookie（如果用户没有登录网站A，那么网站B在诱导的时候，请求网站A的api接口时，会提示你登录）")]),t._v(" "),_("li",[t._v("在不登出A的情况下，访问危险网站B")])]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",[t._v("cookie保证了用户可以处于登录状态，但网站B其实拿不到cookie")])]),t._v(" "),_("h3",{attrs:{id:"防御措施"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#防御措施"}},[t._v("#")]),t._v(" 防御措施")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("Token验证")]),t._v(" "),_("ul",[_("li",[t._v("服务器发送给客户端一个token")]),t._v(" "),_("li",[t._v("客户端提交的表单中带着这个token")]),t._v(" "),_("li",[t._v("如果这个token不合法，那么服务器拒绝这个请求")])])]),t._v(" "),_("li",[_("p",[t._v("隐藏令牌")])])]),t._v(" "),_("p",[t._v("把token隐藏在http的head头中")]),t._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[t._v("Referer验证")])]),t._v(" "),_("p",[t._v("Referer指的时页面请求来源。意思是，只接受本站的请求，服务器才做响应；如果不是，就拦截")]),t._v(" "),_("ol",{attrs:{start:"4"}},[_("li",[t._v("验证码")])]),t._v(" "),_("p",[t._v("CSRF攻击往往是在用户不知情的情况下构造了网络请求。而验证码会强制用户必须与应用进行交互，才能完成最终请求。因此通常情况下，验证码能够很好地遏制CSRF攻击")]),t._v(" "),_("p",[t._v("但是验证码不是万能的，处于交互性的考虑，不能给网站所以操作都加上验证码。因此，验证码只能作为防御CSRF的一种辅助手段，而不能作为最主要的解决方案")])])}),[],!1,null,null,null);v.default=e.exports}}]);