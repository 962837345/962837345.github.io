(window.webpackJsonp=window.webpackJsonp||[]).push([[124],{637:function(t,e,r){"use strict";r.r(e);var a=r(6),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("p",[t._v("React生命周期分为三个过程，分别为挂载过程、更新过程和卸载过程")]),t._v(" "),r("h2",{attrs:{id:"挂载过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#挂载过程"}},[t._v("#")]),t._v(" 挂载过程")]),t._v(" "),r("h3",{attrs:{id:"constructor"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#constructor"}},[t._v("#")]),t._v(" constructor()")]),t._v(" "),r("p",[t._v("constructor()中完成了React数据的初始化，它接受两个参数：props和context，\n当想在函数内部使用这两个参数时，需使用super()传入这两个参数。")]),t._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"title"}),r("p",[t._v("只要使用了constructor()就必须写super(),否则会导致this指向错误。")])]),r("h3",{attrs:{id:"componentwillmount"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#componentwillmount"}},[t._v("#")]),t._v(" componentWillMount()")]),t._v(" "),r("p",[t._v("componentWillMount()一般用的比较少，它更多的是在服务端渲染时使用。\n它代表的过程是组件已经经历了constructor()初始化数据后，但是还未渲染DOM时")]),t._v(" "),r("h3",{attrs:{id:"render"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#render"}},[t._v("#")]),t._v(" render()")]),t._v(" "),r("p",[t._v("用于插入虚拟DOM回调")]),t._v(" "),r("h3",{attrs:{id:"componentdidmount"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#componentdidmount"}},[t._v("#")]),t._v(" componentDidMount()")]),t._v(" "),r("p",[t._v("组件第一次渲染完成，此时dom节点已经生成，可以在这里调用ajax请求，返回数据setState后组件会重新渲染")]),t._v(" "),r("h2",{attrs:{id:"更新过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#更新过程"}},[t._v("#")]),t._v(" 更新过程")]),t._v(" "),r("h3",{attrs:{id:"componentwillreceiveprops-nextprops"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#componentwillreceiveprops-nextprops"}},[t._v("#")]),t._v(" componentWillReceiveProps (nextProps)")]),t._v(" "),r("ol",[r("li",[t._v("在接受父组件改变后的props需要重新渲染组件时用到的比较多")]),t._v(" "),r("li",[t._v("接受一个参数nextProps")]),t._v(" "),r("li",[t._v("通过对比nextProps和this.props，将nextProps的state为当前组件的state，从而重新渲染组件")])]),t._v(" "),r("h3",{attrs:{id:"shouldcomponentupdate-nextprops-nextstate"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#shouldcomponentupdate-nextprops-nextstate"}},[t._v("#")]),t._v(" shouldComponentUpdate(nextProps,nextState)")]),t._v(" "),r("ol",[r("li",[t._v("主要用于性能优化(部分更新)")]),t._v(" "),r("li",[t._v("唯一用于控制组件重新渲染的生命周期，由于在react中，setState以后，state发生变化，\n组件会进入重新渲染的流程，在这里return false可以阻止组件的更新")]),t._v(" "),r("li",[t._v("因为react父组件的重新渲染会导致其所有子组件的重新渲染，这个时候其实我们是不需要所有\n子组件都跟着重新渲染的，因此需要在子组件的该生命周期中做判断")])]),t._v(" "),r("h3",{attrs:{id:"componentwillupdate-nextprops-nextstate"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#componentwillupdate-nextprops-nextstate"}},[t._v("#")]),t._v(" componentWillUpdate(nextProps,nextState)")]),t._v(" "),r("p",[t._v("shouldComponentUpdate返回true以后，组件进入重新渲染的流程，进入componentWillUpdate,这里同样可以拿到nextProps和nextState")]),t._v(" "),r("h3",{attrs:{id:"render-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#render-2"}},[t._v("#")]),t._v(" render()")]),t._v(" "),r("p",[t._v("render函数会插入jsx生成的dom结构，react会生成一份虚拟dom树，在每一次组件更新时，\n在此react会通过其diff算法比较更新前后的新旧DOM树，比较以后，找到最小的有差异的DOM节点，\n并重新渲染")]),t._v(" "),r("h3",{attrs:{id:"componentdidupdate-nextprops-nextstate"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#componentdidupdate-nextprops-nextstate"}},[t._v("#")]),t._v(" componentDidUpdate(nextProps,nextState)")]),t._v(" "),r("p",[t._v("组件更新完毕后，react只会在第一次初始化成功会进入componentDidmount,之后每次重新渲染后\n都会进入这个生命周期，这里可以拿到prevProps和prevState，即更新前的props和state")]),t._v(" "),r("h2",{attrs:{id:"卸载过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#卸载过程"}},[t._v("#")]),t._v(" 卸载过程")]),t._v(" "),r("h3",{attrs:{id:"componentwillunmount"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#componentwillunmount"}},[t._v("#")]),t._v(" componentWillUnmount()")]),t._v(" "),r("p",[t._v("在此处完成组件的卸载和数据的销毁")]),t._v(" "),r("ol",[r("li",[t._v("clear你在组建中所有的setTimeout,setInterval")]),t._v(" "),r("li",[t._v("移除所有组建中的监听 removeEventListener")])])])}),[],!1,null,null,null);e.default=n.exports}}]);